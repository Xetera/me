// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/.prisma/client"
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

// All ids are ULIDs

model Book {
  id               String         @id
  // more than one author possible but we only care about one
  author           String
  title            String
  // 'AMAZON'
  provider         String
  providerId       String         @map("provider_id")
  recordedProgress BookProgress[]
  coverUrl         String         @map("cover_url")
  seenAt           DateTime       @default(now()) @map("seen_at")

  @@unique([provider, providerId], name: "providerKey")
  @@map("book")
}

model BookProgress {
  id       String   @id
  bookId   String   @map("book_id")
  book     Book     @relation(fields: [bookId], references: [id])
  progress Float
  device   String?
  seenAt   DateTime @default(now()) @map("seen_at")
  syncDate DateTime @map("sync_date")

  @@index([bookId])
  @@map("book_progress")
}

model Song {
  id           String    @id
  durationMs   Int       @map("duration_ms")
  providerLink String?   @map("provider_link")
  provider     String
  providerId   String    @map("provider_id")
  title        String
  artist       String
  album        String
  coverUrl     String    @map("cover_url")
  previewUrl   String?   @map("preview_url")
  likedAt      DateTime? @default(now()) @map("liked_at")

  @@unique([provider, providerId], name: "providerKey")
  @@index(fields: [likedAt])
  @@map("song")
}

model SimklActivity {
  // represents the key in the activity
  // https://simkl.docs.apiary.io/#reference/sync/get-last-activity
  type      String   @id
  createdAt DateTime @default(now()) @map("created_at")
  // overwritten for each key of activity
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("simkl_activity")
}

model Request {
  uuid      String  @id
  service   String
  status    Int
  sucessful Boolean
  // This doesn't really need to be json
  headers   String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@index(fields: [createdAt])
  @@map("request")
}

model SimklShow {
  simklId     String  @map("simkl_id")
  title       String
  // "S02E01"
  episode     String
  nextEpisode String? @map("next_episode")
  coverUrl    String? @map("cover_url")
  simklLink   String? @map("simkl_link")

  createdAt     DateTime  @default(now()) @map("created_at")
  lastWatchedAt DateTime? @map("last_watched_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")

  // Every show has 1 unique episode... I hope
  @@unique([simklId, episode], name: "showEpisode")
  @@map("simkl_show")
}
